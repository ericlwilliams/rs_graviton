//////////////////////////////////////////////////////////
// This class has been automatically generated on
// Fri Mar 18 18:02:10 2011 by ROOT version 5.24/00
// from TTree analysisTree/analysisTree
// found on file: ../../files/skims/lnuj/mc.gww.m1000.pu.skim.root
//////////////////////////////////////////////////////////

#ifndef test_h
#define test_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>

class test {
public :
   TTree          *fChain;   //!pointer to the analyzed TTree or TChain
   Int_t           fCurrent; //!current Tree number in a TChain

   // Declaration of leaf types
   Int_t           bcid;
   Int_t           lbn;
   Int_t           RunNumber;
   Int_t           EventNumber;
   Int_t           EventNumber;
   Int_t           EventNumber;
   Bool_t          L1_EM14;
   Bool_t          L1_EM10;
   Bool_t          L1_MU10;
   Bool_t          L1_MU10;
   Bool_t          EF_mu10_MG;
   Bool_t          EF_mu10_MG;
   Int_t           el_n;
   Int_t           el_n;
   Int_t           mu_n;
   Int_t           mu_n;
   Int_t           vxp_n;
   Int_t           vxp_n;
   Int_t           trk_n;
   Int_t           trk_n;
   Int_t           jet_n;
   Int_t           jet_n;
   Bool_t          CUT_OneEl_1_Trigger;
   Bool_t          CUT_OneMu_1_Trigger;
   Bool_t          CUT_OneEl_2_OneLep;
   Bool_t          CUT_OneMu_2_OneLep;
   Bool_t          CUT_OneEl_6_LeTwoJets;
   Bool_t          CUT_OneMu_6_LeTwoJets;
   Bool_t          CUT_OneEl_6_LeOneJets;
   Bool_t          CUT_OneMu_6_LeOneJets;
   Bool_t          CUT_OneEl_6_ZeroJets;
   Bool_t          CUT_OneMu_6_ZeroJets;
   Float_t         EventVtxReWeight;
   Int_t           nGoodElectrons;
   Int_t           nGoodMuons;
   Int_t           nGoodJets;
   Int_t           goodLeptonIndex;
   Float_t         lnuj_lep_pt;
   Float_t         lnuj_lep_eta;
   Float_t         lnuj_lep_phi;
   Float_t         lnuj_jet_pt;
   vector<float>   *tmp_jet_pt;
   Float_t         lnuj_jet_m;
   Float_t         lnuj_jet_eta;
   Float_t         lnuj_jet_phi;
   Int_t           ctrl_ewk1;
   Int_t           ctrl_ewk2;
   Int_t           ctrl_ttbar;
   Float_t         ww_MET_etx;
   Float_t         ww_MET_ety;
   Float_t         ww_METproj;
   Float_t         ww_Mll;
   Int_t           ww_jet_n;

   // List of branches
   TBranch        *b_bcid;   //!
   TBranch        *b_lbn;   //!
   TBranch        *b_RunNumber;   //!
   TBranch        *b_EventNumber;   //!
   TBranch        *b_EventNumber;   //!
   TBranch        *b_EventNumber;   //!
   TBranch        *b_L1_EM14;   //!
   TBranch        *b_L1_EM10;   //!
   TBranch        *b_L1_MU10;   //!
   TBranch        *b_L1_MU10;   //!
   TBranch        *b_EF_mu10_MG;   //!
   TBranch        *b_EF_mu10_MG;   //!
   TBranch        *b_el_n;   //!
   TBranch        *b_el_n;   //!
   TBranch        *b_mu_n;   //!
   TBranch        *b_mu_n;   //!
   TBranch        *b_vxp_n;   //!
   TBranch        *b_vxp_n;   //!
   TBranch        *b_trk_n;   //!
   TBranch        *b_trk_n;   //!
   TBranch        *b_jet_n;   //!
   TBranch        *b_jet_n;   //!
   TBranch        *b_CUT_OneEl_1_Trigger;   //!
   TBranch        *b_CUT_OneMu_1_Trigger;   //!
   TBranch        *b_CUT_OneEl_2_OneLep;   //!
   TBranch        *b_CUT_OneMu_2_OneLep;   //!
   TBranch        *b_CUT_OneEl_6_LeTwoJets;   //!
   TBranch        *b_CUT_OneMu_6_LeTwoJets;   //!
   TBranch        *b_CUT_OneEl_6_LeOneJets;   //!
   TBranch        *b_CUT_OneMu_6_LeOneJets;   //!
   TBranch        *b_CUT_OneEl_6_ZeroJets;   //!
   TBranch        *b_CUT_OneMu_6_ZeroJets;   //!
   TBranch        *b_EventVtxReWeight;   //!
   TBranch        *b_nGoodElectrons;   //!
   TBranch        *b_nGoodMuons;   //!
   TBranch        *b_nGoodJets;   //!
   TBranch        *b_goodLeptonIndex;   //!
   TBranch        *b_lnuj_lep_pt;   //!
   TBranch        *b_lnuj_lep_eta;   //!
   TBranch        *b_lnuj_lep_phi;   //!
   TBranch        *b_lnuj_jet_pt;   //!
   TBranch        *b_tmp_jet_pt;   //!
   TBranch        *b_lnuj_jet_m;   //!
   TBranch        *b_lnuj_jet_eta;   //!
   TBranch        *b_lnuj_jet_phi;   //!
   TBranch        *b_ctrl_ewk1;   //!
   TBranch        *b_ctrl_ewk2;   //!
   TBranch        *b_ctrl_ttbar;   //!
   TBranch        *b_ww_MET_etx;   //!
   TBranch        *b_ww_MET_ety;   //!
   TBranch        *b_ww_METproj;   //!
   TBranch        *b_ww_Mll;   //!
   TBranch        *b_ww_jet_n;   //!

   test(TTree *tree=0);
   virtual ~test();
   virtual Int_t    Cut(Long64_t entry);
   virtual Int_t    GetEntry(Long64_t entry);
   virtual Long64_t LoadTree(Long64_t entry);
   virtual void     Init(TTree *tree);
   virtual void     Loop();
   virtual Bool_t   Notify();
   virtual void     Show(Long64_t entry = -1);
};

#endif

#ifdef test_cxx
test::test(TTree *tree)
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {
      TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("../../files/skims/lnuj/mc.gww.m1000.pu.skim.root");
      if (!f) {
         f = new TFile("../../files/skims/lnuj/mc.gww.m1000.pu.skim.root");
      }
      tree = (TTree*)gDirectory->Get("analysisTree");

   }
   Init(tree);
}

test::~test()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t test::GetEntry(Long64_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Long64_t test::LoadTree(Long64_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (!fChain->InheritsFrom(TChain::Class()))  return centry;
   TChain *chain = (TChain*)fChain;
   if (chain->GetTreeNumber() != fCurrent) {
      fCurrent = chain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void test::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normally not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set object pointer
   tmp_jet_pt = 0;
   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("bcid", &bcid, &b_bcid);
   fChain->SetBranchAddress("lbn", &lbn, &b_lbn);
   fChain->SetBranchAddress("RunNumber", &RunNumber, &b_RunNumber);
   fChain->SetBranchAddress("EventNumber", &EventNumber, &b_EventNumber);
   fChain->SetBranchAddress("EventNumber", &EventNumber, &b_EventNumber);
   fChain->SetBranchAddress("EventNumber", &EventNumber, &b_EventNumber);
   fChain->SetBranchAddress("L1_EM14", &L1_EM14, &b_L1_EM14);
   fChain->SetBranchAddress("L1_EM10", &L1_EM10, &b_L1_EM10);
   fChain->SetBranchAddress("L1_MU10", &L1_MU10, &b_L1_MU10);
   fChain->SetBranchAddress("L1_MU10", &L1_MU10, &b_L1_MU10);
   fChain->SetBranchAddress("EF_mu10_MG", &EF_mu10_MG, &b_EF_mu10_MG);
   fChain->SetBranchAddress("EF_mu10_MG", &EF_mu10_MG, &b_EF_mu10_MG);
   fChain->SetBranchAddress("el_n", &el_n, &b_el_n);
   fChain->SetBranchAddress("el_n", &el_n, &b_el_n);
   fChain->SetBranchAddress("mu_n", &mu_n, &b_mu_n);
   fChain->SetBranchAddress("mu_n", &mu_n, &b_mu_n);
   fChain->SetBranchAddress("vxp_n", &vxp_n, &b_vxp_n);
   fChain->SetBranchAddress("vxp_n", &vxp_n, &b_vxp_n);
   fChain->SetBranchAddress("trk_n", &trk_n, &b_trk_n);
   fChain->SetBranchAddress("trk_n", &trk_n, &b_trk_n);
   fChain->SetBranchAddress("jet_n", &jet_n, &b_jet_n);
   fChain->SetBranchAddress("jet_n", &jet_n, &b_jet_n);
   fChain->SetBranchAddress("CUT_OneEl_1_Trigger", &CUT_OneEl_1_Trigger, &b_CUT_OneEl_1_Trigger);
   fChain->SetBranchAddress("CUT_OneMu_1_Trigger", &CUT_OneMu_1_Trigger, &b_CUT_OneMu_1_Trigger);
   fChain->SetBranchAddress("CUT_OneEl_2_OneLep", &CUT_OneEl_2_OneLep, &b_CUT_OneEl_2_OneLep);
   fChain->SetBranchAddress("CUT_OneMu_2_OneLep", &CUT_OneMu_2_OneLep, &b_CUT_OneMu_2_OneLep);
   fChain->SetBranchAddress("CUT_OneEl_6_LeTwoJets", &CUT_OneEl_6_LeTwoJets, &b_CUT_OneEl_6_LeTwoJets);
   fChain->SetBranchAddress("CUT_OneMu_6_LeTwoJets", &CUT_OneMu_6_LeTwoJets, &b_CUT_OneMu_6_LeTwoJets);
   fChain->SetBranchAddress("CUT_OneEl_6_LeOneJets", &CUT_OneEl_6_LeOneJets, &b_CUT_OneEl_6_LeOneJets);
   fChain->SetBranchAddress("CUT_OneMu_6_LeOneJets", &CUT_OneMu_6_LeOneJets, &b_CUT_OneMu_6_LeOneJets);
   fChain->SetBranchAddress("CUT_OneEl_6_ZeroJets", &CUT_OneEl_6_ZeroJets, &b_CUT_OneEl_6_ZeroJets);
   fChain->SetBranchAddress("CUT_OneMu_6_ZeroJets", &CUT_OneMu_6_ZeroJets, &b_CUT_OneMu_6_ZeroJets);
   fChain->SetBranchAddress("EventVtxReWeight", &EventVtxReWeight, &b_EventVtxReWeight);
   fChain->SetBranchAddress("nGoodElectrons", &nGoodElectrons, &b_nGoodElectrons);
   fChain->SetBranchAddress("nGoodMuons", &nGoodMuons, &b_nGoodMuons);
   fChain->SetBranchAddress("nGoodJets", &nGoodJets, &b_nGoodJets);
   fChain->SetBranchAddress("goodLeptonIndex", &goodLeptonIndex, &b_goodLeptonIndex);
   fChain->SetBranchAddress("lnuj_lep_pt", &lnuj_lep_pt, &b_lnuj_lep_pt);
   fChain->SetBranchAddress("lnuj_lep_eta", &lnuj_lep_eta, &b_lnuj_lep_eta);
   fChain->SetBranchAddress("lnuj_lep_phi", &lnuj_lep_phi, &b_lnuj_lep_phi);
   fChain->SetBranchAddress("lnuj_jet_pt", &lnuj_jet_pt, &b_lnuj_jet_pt);
   fChain->SetBranchAddress("tmp_jet_pt", &tmp_jet_pt, &b_tmp_jet_pt);
   fChain->SetBranchAddress("lnuj_jet_m", &lnuj_jet_m, &b_lnuj_jet_m);
   fChain->SetBranchAddress("lnuj_jet_eta", &lnuj_jet_eta, &b_lnuj_jet_eta);
   fChain->SetBranchAddress("lnuj_jet_phi", &lnuj_jet_phi, &b_lnuj_jet_phi);
   fChain->SetBranchAddress("ctrl_ewk1", &ctrl_ewk1, &b_ctrl_ewk1);
   fChain->SetBranchAddress("ctrl_ewk2", &ctrl_ewk2, &b_ctrl_ewk2);
   fChain->SetBranchAddress("ctrl_ttbar", &ctrl_ttbar, &b_ctrl_ttbar);
   fChain->SetBranchAddress("ww_MET_etx", &ww_MET_etx, &b_ww_MET_etx);
   fChain->SetBranchAddress("ww_MET_ety", &ww_MET_ety, &b_ww_MET_ety);
   fChain->SetBranchAddress("ww_METproj", &ww_METproj, &b_ww_METproj);
   fChain->SetBranchAddress("ww_Mll", &ww_Mll, &b_ww_Mll);
   fChain->SetBranchAddress("ww_jet_n", &ww_jet_n, &b_ww_jet_n);
   Notify();
}

Bool_t test::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normally not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   return kTRUE;
}

void test::Show(Long64_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t test::Cut(Long64_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
#endif // #ifdef test_cxx
