



#include <string.h>
#include "TChain.h"
#include "TFile.h"
#include "TH1.h"
#include "TTree.h"
#include "TKey.h"
#include "Riostream.h"
#include "../include/wwXSec.h"


TList *FileList;
TFile *Target;

//const double invPB=1.14824;
const double invPB=1.91757;
//const double invPB=35.2;
const int nmult=5;//zuu
wwXSec* xsecs[nmult+1];


void MergeRootfile( TDirectory *target, TList *sourcelist);

bool ToScale(string filename);


void hadd(string proc="zuu") {
   // in an interactive ROOT session, edit the file names
   // Target and FileList, then
   // root > .L hadd.C
   // root > hadd()

  string result = proc+".root";
  Target = TFile::Open( result.c_str(), "RECREATE" );


  
  FileList = new TList();



  string cur_proc;
  string cur_file;
  char cur_nmult[10];
  //loop/load multiplicity files
  for(int i=0;i<nmult+1;i++){


    sprintf(cur_nmult,"Np%d",i);
    cur_file=proc+cur_nmult;
    cur_proc=cur_file;
    cur_file+=".root";
    //cur_file="../"+cur_file;
    
    FileList->Add( TFile::Open(cur_file.c_str()) );
    xsecs[i]= new wwXSec(cur_proc.c_str());
  //  FileList->Add( TFile::Open("hsimple2.root") );

  }
  MergeRootfile( Target, FileList);

}   

void MergeRootfile( TDirectory *target, TList *sourcelist ) {

  //  cout << "Target path: " << target->GetPath() << endl;
  TString path( (char*)strstr( target->GetPath(), ":" ) );
  path.Remove( 0, 2 );


  TFile *first_source = (TFile*)sourcelist->First();

  //std::cout<<"First source: "<<first_source->GetName()<<std::endl;

  first_source->cd( path );
  TDirectory *current_sourcedir = gDirectory;
  //gain time, do not add the objects in the list in memory
  Bool_t status = TH1::AddDirectoryStatus();
  TH1::AddDirectory(kFALSE);

  // loop over all keys in this directory
  TChain *globChain = 0;
  TIter nextkey( current_sourcedir->GetListOfKeys() );
  TKey *key, *oldkey=0;
  while ( (key = (TKey*)nextkey())) {
    //std::cout<<key->GetName()<<std::endl;
    //keep only the highest cycle number for each key
    if (oldkey && !strcmp(oldkey->GetName(),key->GetName())) continue;

    // read object from first source file
    first_source->cd( path );
    TObject *obj = key->ReadObj();

    if ( obj->IsA()->InheritsFrom( "TH1" ) ) {
      // descendant of TH1 -> merge it

      //      cout << "Merging histogram " << obj->GetName() << endl;

      int file_ctr=0;
  
      TH1 *h1 = (TH1*)obj;

      bool scale_hist = ToScale(h1->GetName());

      double Nexp=0;
      double Nevt=0;
      double wwScale=0;
      
      if(scale_hist) {

	Nexp = ((wwXSec*) xsecs[file_ctr])->Nexp(invPB);
	Nevt = ((wwXSec*) xsecs[file_ctr])->Nevt();
	wwScale = Nexp/Nevt;

	h1->Scale(wwScale*h1->GetEntries()/h1->Integral());

	//	std::cout<<"Scaling "<<first_source->GetName()<<" by "<<wwScale<<std::endl;
      }
      
      //std::cout<<h1->GetName()<<std::endl;

      // loop over all source files and add the content of the
      // correspondant histogram to the one pointed to by "h1"
      TFile *nextsource = (TFile*)sourcelist->After( first_source );

      
      
      while ( nextsource ) {
	++file_ctr;
	//std::cout<<"next source: "<<nextsource->GetName()<<std::endl;  

        // make sure we are at the correct directory level by cd'ing to path
        nextsource->cd( path );
        TKey *key2 = (TKey*)gDirectory->GetListOfKeys()->FindObject(h1->GetName());
        if (key2) {
           TH1 *h2 = (TH1*)key2->ReadObj();

	   if(scale_hist) {
	     Nexp = ((wwXSec*) xsecs[file_ctr])->Nexp(invPB);
	     Nevt = ((wwXSec*) xsecs[file_ctr])->Nevt();
	     wwScale = Nexp/Nevt;

	     h2->Scale(wwScale/**h2->GetEntries()/h2->Integral()*/);

	     //std::cout<<"Scaling "<<nextsource->GetName()<<" by "<<wwScale<<std::endl;
	   }

           h1->Add( h2 );
           delete h2;
        }

        nextsource = (TFile*)sourcelist->After( nextsource );
      }
    }
    else if ( obj->IsA()->InheritsFrom( "TTree" ) ) {
      
      // loop over all source files create a chain of Trees "globChain"
      const char* obj_name= obj->GetName();

      globChain = new TChain(obj_name);
      globChain->Add(first_source->GetName());
      TFile *nextsource = (TFile*)sourcelist->After( first_source );
      //      const char* file_name = nextsource->GetName();
      // cout << "file name  " << file_name << endl;
     while ( nextsource ) {
     	  
       globChain->Add(nextsource->GetName());
       nextsource = (TFile*)sourcelist->After( nextsource );
     }

    } else if ( obj->IsA()->InheritsFrom( "TDirectory" ) ) {
      // it's a subdirectory

      cout << "Found subdirectory " << obj->GetName() << endl;

      // create a new subdir of same name and title in the target file
      target->cd();
      TDirectory *newdir = target->mkdir( obj->GetName(), obj->GetTitle() );

      // newdir is now the starting point of another round of merging
      // newdir still knows its depth within the target file via
      // GetPath(), so we can still figure out where we are in the recursion
      MergeRootfile( newdir, sourcelist);

    } else {

      // object is of no type that we know or can handle
      cout << "Unknown object type, name: " 
           << obj->GetName() << " title: " << obj->GetTitle() << endl;
    }

    // now write the merged histogram (which is "in" obj) to the target file
    // note that this will just store obj in the current directory level,
    // which is not persistent until the complete directory itself is stored
    // by "target->Write()" below
    if ( obj ) {
      target->cd();

      //!!if the object is a tree, it is stored in globChain...
	if(obj->IsA()->InheritsFrom( "TTree" ))
          globChain->Merge(target->GetFile(),0,"keep");
	else
	obj->Write( key->GetName() );
    }

  } // while ( ( TKey *key = (TKey*)nextkey() ) )

  // save modifications to target file
  target->SaveSelf(kTRUE);
  TH1::AddDirectory(status);
}

bool ToScale(string histname){
  bool scale_return=true;

  if(histname.find("h_evtn")==0 ||
     histname.find("h_L")==0 ||
     histname.find("h_all")==0) scale_return=false;


  return scale_return;
}


